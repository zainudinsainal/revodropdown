{"version":3,"file":"revo-list.js","sourceRoot":"","sources":["../../../src/components/list/revo-list.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, h, Prop, Event, EventEmitter, Method, Listen, State } from '@stencil/core';\nimport { getItemLabel } from '../../utils/item.helpers';\n\n@Component({ tag: 'revo-list', styleUrl: 'revo-list.style.scss' })\nexport class RevoDropdownList {\n  @State() currentItem = 0;\n  private selectedEl: HTMLElement;\n  /**\n   * Define object mapping for id/value\n   */\n  @Prop() sourceItems: any[] = [];\n  @Prop() isFocused: boolean = false;\n  /**\n   * Define object mapping for labels\n   */\n  @Prop() dataLabel: string;\n\n  @Event({ bubbles: false }) changed: EventEmitter<{ item: any; e: any }>;\n\n  /** Recived keyboard down from element */\n  @Listen('keydown', { target: 'document' }) onKey(e: KeyboardEvent) {\n    let item:any;\n    if (!this.isFocused) {\n      return;\n    }\n    switch (e.code) {\n      case 'ArrowUp':\n        e.preventDefault();\n        if (this.currentItem <= 0) {\n          return;\n        }\n        this.currentItem--;\n        break;\n      case 'ArrowDown':\n        e.preventDefault();\n        if (this.sourceItems[this.currentItem + 1]) {\n          this.currentItem++;\n        }\n        break;\n      case 'Tab':\n        e.preventDefault();\n        item = this.sourceItems[this.currentItem];\n        if (item) {\n          this.changed.emit({ item, e });\n        }\n        break;\n      case 'Enter':\n        e.preventDefault();\n        item = this.sourceItems[this.currentItem];\n        if (item) {\n          this.changed.emit({ item, e });\n        }\n        break;\n    }\n  }\n\n  @Method() async refresh(source: any[]) {\n    this.sourceItems = source;\n  }\n\n  componentDidRender() {\n    this.selectedEl?.scrollIntoView({\n      block: 'nearest',\n      inline: 'nearest',\n    });\n  }\n\n  render() {\n    this.selectedEl = undefined;\n    const items = [];\n    for (let i in this.sourceItems) {\n      const item = this.sourceItems[i];\n      const isSelected = parseInt(i) === this.currentItem;\n      const props = {\n        class: { 'selected': isSelected },\n        ref: e => {\n          if (isSelected) {\n            this.selectedEl = e;\n          }\n        },\n        onClick: e => this.changed.emit({ item, e })\n      };\n      const li = <li {...props}>{getItemLabel(item, this.dataLabel)}</li>;\n      items.push(li);\n    }\n    return <ul>{items}</ul>;\n  }\n}\n"]}